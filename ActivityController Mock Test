package com.example.verification.database.controller;

import com.example.verification.database.model.Activity;
import com.example.verification.database.services.ActivityService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.Arrays;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ActivityController.class)
public class ActivityControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Mock
    private ActivityService activityService;

    @InjectMocks
    private ActivityController activityController;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(activityController).build();
    }

    @Test
    public void testGetAllActivities() throws Exception {
        Activity activity1 = new Activity(1, "Activity 1");
        Activity activity2 = new Activity(2, "Activity 2");
        when(activityService.findAllActivities()).thenReturn(Arrays.asList(activity1, activity2));

        mockMvc.perform(get("/activity"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1))
                .andExpect(jsonPath("$[1].name").value("Activity 2"));
    }

    @Test
    public void testGetActivityById() throws Exception {
        Activity activity = new Activity(1, "Activity 1");
        when(activityService.findActivityById(1)).thenReturn(activity);

        mockMvc.perform(get("/activity/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("Activity 1"));
    }

    @Test
    public void testCreateActivity() throws Exception {
        Activity activity = new Activity(1, "New Activity");
        when(activityService.createActivity(any(Activity.class))).thenReturn(activity);

        mockMvc.perform(post("/activity/api/auth")
                .contentType("application/json")
                .content("{\"name\": \"New Activity\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("New Activity"));
    }

    @Test
    public void testUpdateActivity() throws Exception {
        Activity activity = new Activity(1, "Updated Activity");
        when(activityService.updateActivity(anyInt(), any(Activity.class))).thenReturn(activity);

        mockMvc.perform(put("/activity/1")
                .contentType("application/json")
                .content("{\"name\": \"Updated Activity\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Updated Activity"));
    }

    @Test
    public void testDeleteActivity() throws Exception {
        mockMvc.perform(delete("/activity/1"))
                .andExpect(status().isNoContent());
        Mockito.verify(activityService).deleteActivityById(1);
    }
}
