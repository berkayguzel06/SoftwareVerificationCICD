package com.example.verification.database.controller;

import com.example.verification.database.model.File;
import com.example.verification.database.services.FileService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.Arrays;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(FileController.class)
public class FileControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Mock
    private FileService fileService;

    @InjectMocks
    private FileController fileController;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.standaloneSetup(fileController).build();
    }

    @Test
    public void testFindAllFiles() throws Exception {
        File file1 = new File(1, "File 1", "path/to/file1");
        File file2 = new File(2, "File 2", "path/to/file2");
        when(fileService.getAllFiles()).thenReturn(Arrays.asList(file1, file2));

        mockMvc.perform(get("/file"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1))
                .andExpect(jsonPath("$[1].name").value("File 2"));
    }

    @Test
    public void testGetFileById() throws Exception {
        File file = new File(1, "File 1", "path/to/file1");
        when(fileService.getFilebyId(1)).thenReturn(file);

        mockMvc.perform(get("/file/id/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("File 1"));
    }

    @Test
    public void testCreateFile() throws Exception {
        File file = new File(1, "New File", "path/to/newfile");
        when(fileService.create(any(File.class))).thenReturn(file);

        mockMvc.perform(post("/file")
                .contentType("application/json")
                .content("{\"name\": \"New File\", \"path\": \"path/to/newfile\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("New File"));
    }

    @Test
    public void testUpdateFile() throws Exception {
        File file = new File(1, "Updated File", "path/to/updatedfile");
        when(fileService.updateFile(any(File.class))).thenReturn(file);

        mockMvc.perform(put("/file")
                .contentType("application/json")
                .content("{\"id\": 1, \"name\": \"Updated File\", \"path\": \"path/to/updatedfile\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Updated File"));
    }

    @Test
    public void testDeleteFile() throws Exception {
        File file = new File(1, "File to Delete", "path/to/filetodelete");
        when(fileService.deleteFile(1)).thenReturn(file);

        mockMvc.perform(delete("/file/sha/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.name").value("File to Delete"));
    }
}
